// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LoginGrpcServiceClient is the client API for LoginGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginGrpcServiceClient interface {
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginResponse, error)
}

type loginGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginGrpcServiceClient(cc grpc.ClientConnInterface) LoginGrpcServiceClient {
	return &loginGrpcServiceClient{cc}
}

func (c *loginGrpcServiceClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/Go000.wk04.api.v1.LoginGrpcService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginGrpcServiceServer is the server API for LoginGrpcService service.
// All implementations must embed UnimplementedLoginGrpcServiceServer
// for forward compatibility
type LoginGrpcServiceServer interface {
	Login(context.Context, *User) (*LoginResponse, error)
	mustEmbedUnimplementedLoginGrpcServiceServer()
}

// UnimplementedLoginGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoginGrpcServiceServer struct {
}

func (UnimplementedLoginGrpcServiceServer) Login(context.Context, *User) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLoginGrpcServiceServer) mustEmbedUnimplementedLoginGrpcServiceServer() {}

// UnsafeLoginGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginGrpcServiceServer will
// result in compilation errors.
type UnsafeLoginGrpcServiceServer interface {
	mustEmbedUnimplementedLoginGrpcServiceServer()
}

func RegisterLoginGrpcServiceServer(s grpc.ServiceRegistrar, srv LoginGrpcServiceServer) {
	s.RegisterService(&_LoginGrpcService_serviceDesc, srv)
}

func _LoginGrpcService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginGrpcServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Go000.wk04.api.v1.LoginGrpcService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginGrpcServiceServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoginGrpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Go000.wk04.api.v1.LoginGrpcService",
	HandlerType: (*LoginGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _LoginGrpcService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
